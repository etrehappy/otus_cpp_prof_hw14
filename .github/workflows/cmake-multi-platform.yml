name: 'CMake on multiple platforms'
on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]
jobs:      
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
          
  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false 
      
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]  
        build_type: [Release]
        include:
        - os: ubuntu-latest
          c_compiler: gcc
          cpp_compiler: g++
        - os: macos-latest
          c_compiler: clang
          cpp_compiler: clang++
        - os: windows-latest
          c_compiler: cl
          cpp_compiler: cl 
          
    steps:
    - uses: actions/checkout@v4  
  
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    ###########################   libraries   #########################################################

    # Ubuntu & macOS

    - name: Cache vcpkg (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/vcpkg
          ~/vcpkg/
        key: vcpkg-${{ runner.os }}-libraries-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-libraries-
      
    - name: Install vcpkg (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      id: vcpkg
      run: |
        if [ ! -d "$HOME/vcpkg" ]; then
          mkdir -p ~/vcpkg/
          git clone https://github.com/microsoft/vcpkg.git $HOME/vcpkg
          $HOME/vcpkg/bootstrap-vcpkg.sh
        else          
          echo "vcpkg is cached"
        fi
    
    - name: Install Libraries (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          if [ ! -d "$HOME/vcpkg/packages/boost-uuid_x64-linux" ]; then
            $HOME/vcpkg/vcpkg install boost-system boost-asio boost-log boost-program-options boost-uuid protobuf sqlitecpp gtest
          else
            echo "Libraries are cached"
          fi
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          if [ ! -d "$HOME/vcpkg/packages/boost-uuid_arm64-osx" ]; then
            $HOME/vcpkg/vcpkg install boost-system boost-asio boost-log boost-program-options boost-uuid protobuf sqlitecpp gtest
          else
            echo "Libraries are cached"
          fi
        fi

    # - name: Configure CMake (Ubuntu & macOS)
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }} \
    #           -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
    #           -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
    #           -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
    #           -DCMAKE_TOOLCHAIN_FILE=$HOME/vcpkg/scripts/buildsystems/vcpkg.cmake \
    #           -S ${GITHUB_WORKSPACE}/source


    # Windows

    - name: Cache vcpkg (Windows)
      id: setup-boost-cache-windows
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: C:\Users\runneradmin\vcpkg
        key: vcpkg-${{ runner.os }}-libraries-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-libraries- 

    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      id: vcpkg_win
      shell: pwsh
      run: |
        if (!(Test-Path -Path "C:\Users\runneradmin\vcpkg")) 
        {
          mkdir -p "C:\Users\runneradmin\vcpkg"
          git clone https://github.com/microsoft/vcpkg.git "C:\Users\runneradmin\vcpkg"
          & "C:\Users\runneradmin\vcpkg\bootstrap-vcpkg.bat"
        } 
        else 
        {
          echo "vcpkg is cached"
        }
        
    - name: Install Libraries (Windows)
      if: matrix.os == 'windows-latest'
      id: lib_win
      shell: pwsh
      run: |
        if (!(Test-Path -Path "C:\Users\runneradmin\vcpkg\packages\protobuf_x64-windows")) 
        {
          & "C:\Users\runneradmin\vcpkg\vcpkg.exe" install boost-system boost-asio boost-log boost-program-options boost-uuid protobuf sqlitecpp gtest
        } 
        else 
        {
          echo "vcpkg is cached"
        }
        
    # - name: Configure CMake (Windows)
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     cmake -B ${{ steps.strings.outputs.build-output-dir }} `
    #           -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
    #           -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
    #           -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
    #           -DCMAKE_TOOLCHAIN_FILE=C:\Users\runneradmin\vcpkg\scripts\buildsystems\vcpkg.cmake `
    #           -S ${{ github.workspace }}\source
    # ###########################   Build   #########################################################    
      
    # - name: Build
    #   # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # ###########################   Upload Release   #########################################################
    # - name: Prepare directories and copy files (Windows)
    #   if: matrix.os == 'windows-latest'
    #   shell: pwsh
    #   run: |
    #     $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}"
    #     $releaseDir = Join-Path -Path $buildOutputDir -ChildPath 'release'
    #     $clientDir = Join-Path -Path $releaseDir -ChildPath 'client'
    #     $serverDir = Join-Path -Path $releaseDir -ChildPath 'server'
        
    #     # Создание директорий
    #     New-Item -ItemType Directory -Force -Path $clientDir
    #     New-Item -ItemType Directory -Force -Path $serverDir
        
    #     # Копирование файлов и директорий
    #     Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'client\Release\*') -Destination $clientDir
    #     Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'server\Release\*') -Destination $serverDir
    
    # - name: Archive client and server files (Windows)
    #   if: matrix.os == 'windows-latest'
    #   shell: pwsh
    #   run: |
    #     $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}"
    #     $releaseDir = Join-Path -Path $buildOutputDir -ChildPath 'release'
    #     $archivePath = Join-Path -Path $buildOutputDir -ChildPath 'game.zip'
        
    #     Compress-Archive -Path $releaseDir\client, $releaseDir\server -DestinationPath $archivePath -Force

    # - name: Prepare directories for archiving (Ubuntu & macOS)
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release/client
    #     mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release/server
    #     cp -r ${{ steps.strings.outputs.build-output-dir }}/client/client ${{ steps.strings.outputs.build-output-dir }}/release/client/
    #     cp -r ${{ steps.strings.outputs.build-output-dir }}/client/files ${{ steps.strings.outputs.build-output-dir }}/release/client/
    #     cp -r ${{ steps.strings.outputs.build-output-dir }}/server/server ${{ steps.strings.outputs.build-output-dir }}/release/server/
        
    # - name: Archive client and server files (Ubuntu & macOS)
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     cd ${{ steps.strings.outputs.build-output-dir }}/release
    #     tar -czf game.tar.gz client server

    # - name: Upload Release Asset (Ubuntu & macOS)
    #   if: ${{ success() && matrix.os != 'windows-latest' }}    
    #   id: upload-release-asset-client
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ needs.create_release.outputs.upload_url }}
    #     asset_path: ${{ steps.strings.outputs.build-output-dir }}/release/game.tar.gz
    #     asset_name: game-${{ matrix.os }}-0.0.${{ github.run_number }}.tar.gz
    #     asset_content_type: application/gzip

    # - name: Upload Release Asset (Windows)
    #   if: ${{ success() && matrix.os == 'windows-latest' }}
    #   id: upload-release-asset-windows
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ needs.create_release.outputs.upload_url }}
    #     asset_path: ${{ steps.strings.outputs.build-output-dir }}\game.zip
    #     asset_name: game-${{ matrix.os }}-0.0.${{ github.run_number }}.zip
    #     asset_content_type: application/zip
